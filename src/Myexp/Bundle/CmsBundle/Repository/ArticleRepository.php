<?php

namespace Myexp\Bundle\CmsBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Routing\Route;
use Symfony\Component\Routing\RouteCollection;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository implements ContentModel {

    /**
     * 获得默认路由
     * 
     * @return RouteCollection
     */
    public function getDefaultRoute($urlSurffix) {

        $routes = new RouteCollection();

        //文章列表路由
        $listPath = '/article/list/{id}' . $urlSurffix;
        $listDefaults = array(
            '_controller' => 'MyexpCmsBundle:Article:list'
        );
        $listRequirements = array(
            'id' => '\d+',
        );
        $listwRoute = new Route($listPath, $listDefaults, $listRequirements);
        $routes->add('article_list', $listwRoute);

        //文章查看路由
        $showPath = '/article/show/{id}' . $urlSurffix;
        $showDefaults = array(
            '_controller' => 'MyexpCmsBundle:Article:show'
        );
        $showRequirements = array(
            'id' => '\d+',
        );
        $showRoute = new Route($showPath, $showDefaults, $showRequirements);
        $routes->add('article_show', $showRoute);

        return $routes;
    }

    /**
     * 获得分页查询
     * 
     * @param type $params
     * @return type
     */
    public function getPaginationQuery($params = null) {
        $qb = $this->buildQuery($params);

        return $qb->getQuery();
    }

    /**
     * 构造查询
     * 
     * @param type $params
     * @return type
     */
    public function buildQuery($params) {

        $qb = $this->createQueryBuilder('a');

        if (isset($params['category'])) {
            $allChildren = $params['category']->getAllChildren();
            $qb
                    ->andWhere($qb->expr()->in('a.category', '?1'))
                    ->setParameter(1, $allChildren)
            ;
        }
        if (isset($params['isActive'])) {
            $qb
                    ->andWhere('a.isActive = ?2')
                    ->setParameter(2, $params['isActive'])
            ;
        }

        return $qb;
    }
}
